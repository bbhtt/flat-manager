on: [push, pull_request]

name: Continuous integration

jobs:
  check:
    name: Check
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: sudo apt-get install -y libostree-dev
      - name: Check
        run: cargo check

  test:
    name: Test Suite
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: sudo apt-get install -y libostree-dev
      - name: Check
        run: cargo test

  end-to-end:
    name: End-to-end upload test
    runs-on: ubuntu-22.04
    steps:
     - uses: actions/checkout@v4

     - name: Start containers
       working-directory: ./tests
       run: docker compose up -d

     - name: Wait for the containers to finish loading
       run: sleep 10

     - name: Run test
       working-directory: ./tests
       run: docker compose exec flat-manager ./tests/run-test.py

  fmt:
    name: Rustfmt
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Format
        run: cargo fmt --all --check

  clippy:
    name: Clippy
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Install dependencies
        run: sudo apt-get install -y libostree-dev
      - name: Clippy
        run: cargo clippy -- -D warnings

  ruff-lint:
    name: ruff-lint
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v2

  ruff-format:
    name: ruff-format
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v2
        with:
          args: 'format --check'

  docker:
    name: Build Docker image
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            platform: amd64
          - os: ubuntu-24.04-arm
            platform: arm64
    runs-on: ${{matrix.os}}
    concurrency:
      group: ${{ github.ref }}-${{ matrix.platform }}-docker
      cancel-in-progress: true
    if: success() && github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        if: github.ref == 'refs/heads/master'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: ${{ github.ref == 'refs/heads/master' }}
          provenance: false
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}-${{ matrix.platform }}
            ghcr.io/${{ github.repository }}:latest-${{ matrix.platform }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=ssh://git@github.com:${{ github.repository }}.git
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/${{ matrix.platform }}


  docker-manifest:
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs:
      - docker
    permissions:
      packages: write
    steps:
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          docker manifest create \
            ghcr.io/${{ github.repository }}:${{ github.sha }} \
            --amend ghcr.io/${{ github.repository }}:${{ github.sha }}-amd64 \
            --amend ghcr.io/${{ github.repository }}:${{ github.sha }}-arm64

          docker manifest push ghcr.io/${{ github.repository }}:${{ github.sha }}

          docker manifest create \
            ghcr.io/${{ github.repository }}:latest \
            --amend ghcr.io/${{ github.repository }}:${{ github.sha }}-amd64 \
            --amend ghcr.io/${{ github.repository }}:${{ github.sha }}-arm64

          docker manifest push ghcr.io/${{ github.repository }}:latest
